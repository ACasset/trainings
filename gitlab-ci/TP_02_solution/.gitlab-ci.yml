# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

services:
  - name: postgres:16.8-alpine3.20
    alias: db
    # On conserve l'entrypoint de l'image
    entrypoint: ["docker-entrypoint.sh"]
    # Ainsi que sa commande
    command: ["postgres"]
    variables:
      POSTGRES_PASSWORD: "V3ryS3cur3P@ssw0rd!"

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

get-wordpress-salts:
  stage: build
  image: curlimages/curl:8.13.0
  script:
    - echo "<?php" > wordpress_salts.php
    - curl --silent https://api.wordpress.org/secret-key/1.1/salt/ >> wordpress_salts.php
    - echo "?>" >> wordpress_salts.php
    - cat wordpress_salts.php
  artifacts:
    paths:
      - wordpress_salts.php

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

display-php-version:
  stage: test
  image: php:8.4.6-zts-alpine
  script:
    - php -v
    - cat wordpress_salts.php

try-database-connection:
  stage: test
  image: php:8.4.6-zts-alpine
  script:
    # Comme on a spécifié un alias, on peut maintenant joindre le service en l'utilisant
    - ping -c 4 db
    # Les variables étant maintenant spécifiées dans le service, on y a plus accès au sein du job même
    - echo Mot de passe PostgreSQL = ${POSTGRES_PASSWORD}

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
